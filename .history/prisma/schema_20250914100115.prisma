generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customer {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  billing_name     String             @db.VarChar(100)
  tin              String             @db.VarChar(20)
  phone            String             @db.VarChar(20)
  service_number   String             @db.VarChar(50)
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  updated_at       DateTime?          @default(now()) @db.Timestamp(0)
  user_id          Int?
  users            users?             @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "customer_ibfk_1")
  invoice          invoice[]
  proforma_invoice proforma_invoice[]
  quotation        quotation[]

  @@index([user_id], map: "idx_customer_user")
}

model invoice {
  id              Int               @id @default(autoincrement())
  customer_id     Int
  amount_paid     Decimal           @default(0.00) @db.Decimal(10, 2)
  amount_to_pay   Decimal           @db.Decimal(10, 2)
  start_date      DateTime          @db.Date
  end_date        DateTime          @db.Date
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @db.Timestamp(0)
  user_id         Int?
  customer        customer          @relation(fields: [customer_id], references: [id], onUpdate: Restrict, map: "invoice_ibfk_1")
  users           users?            @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "invoice_ibfk_2")
  invoice_product invoice_product[]

  @@index([customer_id], map: "idx_invoice_customer")
  @@index([user_id], map: "user_id")
}

model invoice_product {
  id         Int       @id @default(autoincrement())
  invoice_id Int
  product_id Int
  qty        Int       @default(1)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  user_id    Int
  invoice    invoice   @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "invoice_product_ibfk_1")
  product    product   @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "invoice_product_ibfk_2")
  users      users     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "invoice_product_ibfk_3")

  @@index([invoice_id], map: "invoice_id")
  @@index([product_id], map: "product_id")
  @@index([user_id], map: "user_id")
}

model notification_type {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(50)
  created_at    DateTime?       @default(now()) @db.Timestamp(0)
  updated_at    DateTime?       @default(now()) @db.Timestamp(0)
  user_id       Int?
  users         users?           @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "notification_type_ibfk_1")
  notifications notifications[]

  @@index([user_id], map: "user_id")
}

model notifications {
  id                                     Int               @id @default(autoincrement())
  content                                String            @db.Text
  type_id                                Int
  is_read                                Boolean           @default(false)
  for_user_id                            Int
  created_at                             DateTime?         @default(now()) @db.Timestamp(0)
  updated_at                             DateTime?         @default(now()) @db.Timestamp(0)
  user_id                                Int
  notification_type                      notification_type @relation(fields: [type_id], references: [id], onUpdate: Restrict, map: "notifications_ibfk_1")
  users_notifications_for_user_idTousers users             @relation("notifications_for_user_idTousers", fields: [for_user_id], references: [id], onUpdate: Restrict, map: "notifications_ibfk_2")
  users_notifications_user_idTousers     users             @relation("notifications_user_idTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "notifications_ibfk_3")

  @@index([for_user_id], map: "idx_notifications_user")
  @@index([type_id], map: "type_id")
  @@index([user_id], map: "user_id")
}

/// This model has been renamed to 'Renamedpackage' during introspection, because the original name 'package' is reserved.
model Renamedpackage {
  id           Int          @id @default(autoincrement())
  type_id      Int
  description  String       @db.Text
  created_at   DateTime?    @default(now()) @db.Timestamp(0)
  updated_at   DateTime?    @default(now()) @db.Timestamp(0)
  user_id      Int?
  package_type package_type @relation(fields: [type_id], references: [id], onUpdate: Restrict, map: "package_ibfk_1")
  users        users?       @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "package_ibfk_2")
  product      product[]

  @@index([type_id], map: "type_id")
  @@index([user_id], map: "user_id")
  @@map("package")
}

model package_type {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  created_at     DateTime?        @default(now()) @db.Timestamp(0)
  updated_at     DateTime?        @default(now()) @db.Timestamp(0)
  user_id        Int?
  Renamedpackage Renamedpackage[]
  users          users?            @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "package_type_ibfk_1")
 

  @@index([user_id], map: "user_id")
}

model product {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  package_id         Int?
  price             Decimal             @db.Decimal(10, 2)
  net_price         Decimal             @db.Decimal(10, 2)
  duration          Int
  type_id           Int
  created_at        DateTime?           @default(now()) @db.Timestamp(0)
  updated_at        DateTime?           @default(now()) @db.Timestamp(0)
  user_id           Int?
  invoice_product   invoice_product[]
 
  Renamedpackage    Renamedpackage?     @relation(fields: [package_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "product_ibfk_2")
  product_type      product_type        @relation(fields: [type_id], references: [id], onUpdate: Restrict, map: "product_ibfk_3")
  users             users?               @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "product_ibfk_4")
  proforma_product  proforma_product[]
  quotation_product quotation_product[]

  @@index([package_id], map: "package_id")
  
  @@index([type_id], map: "type_id")
  @@index([user_id], map: "user_id")
  stock_item stock_item[] @relation(map: "stock_item_ibfk_4")
}

model product_type {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  user_id    Int?
  product    product[]
  users      users?     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "product_type_ibfk_1")

  @@index([user_id], map: "user_id")
}

model proforma_invoice {
  id               Int                @id @default(autoincrement())
  customer_id      Int
  start_date       DateTime           @db.Date
  end_date         DateTime           @db.Date
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  updated_at       DateTime?          @default(now()) @db.Timestamp(0)
  user_id          Int?
  customer         customer           @relation(fields: [customer_id], references: [id], onUpdate: Restrict, map: "proforma_invoice_ibfk_1")
  users            users?              @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "proforma_invoice_ibfk_2")
  proforma_product proforma_product[]

  @@index([customer_id], map: "customer_id")
  @@index([user_id], map: "user_id")
}

model proforma_product {
  id               Int              @id @default(autoincrement())
  proforma_id      Int
  product_id       Int
  qty              Int              @default(1)
  price            Decimal          @db.Decimal(10, 2)
  description      String?          @db.Text
  notes            String?          @db.Text
  discount         Decimal?         @default(0.00) @db.Decimal(5, 2)
  created_at       DateTime?        @default(now()) @db.Timestamp(0)
  updated_at       DateTime?        @default(now()) @db.Timestamp(0)
  user_id          Int?
  proforma_invoice proforma_invoice @relation(fields: [proforma_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "proforma_product_ibfk_1")
  product          product          @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "proforma_product_ibfk_2")
  users            users ?           @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "proforma_product_ibfk_3")

  @@index([product_id], map: "product_id")
  @@index([proforma_id], map: "proforma_id")
  @@index([user_id], map: "user_id")
}

model quotation {
  id                Int                 @id @default(autoincrement())
  customer_id       Int
  created_at        DateTime?           @default(now()) @db.Timestamp(0)
  updated_at        DateTime?           @default(now()) @db.Timestamp(0)
  user_id           Int
  customer          customer            @relation(fields: [customer_id], references: [id], onUpdate: Restrict, map: "quotation_ibfk_1")
  users             users ?              @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "quotation_ibfk_2")
  quotation_product quotation_product[]

  @@index([customer_id], map: "customer_id")
  @@index([user_id], map: "user_id")
}

model quotation_product {
  id           Int       @id @default(autoincrement())
  quotation_id Int
  product_id   Int
  qty          Int       @default(1)
  price        Decimal   @db.Decimal(10, 2)
  discount     Decimal?  @default(0.00) @db.Decimal(5, 2)
  notes        String?   @db.Text
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  user_id      Int
  quotation    quotation @relation(fields: [quotation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "quotation_product_ibfk_1")
  product      product   @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "quotation_product_ibfk_2")
  users        users ?   @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "quotation_product_ibfk_3")

  @@index([product_id], map: "product_id")
  @@index([quotation_id], map: "quotation_id")
  @@index([user_id], map: "user_id")
}

model stock_item {
  id                   Int                  @id @default(autoincrement())
  name                 String               @db.VarChar(100)
  category_id          Int
  status               stock_item_status    @default(active)
  product_id           Int?
  quantity             Int                  @default(0)
  supplier_id          Int
  min_level            Int                  @default(0)
  reorder_level        Int                  @default(0)
  created_at           DateTime?            @default(now()) @db.Timestamp(0)
  updated_at           DateTime?            @default(now()) @db.Timestamp(0)
  user_id              Int?
  product              product?             @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "stock_item_ibfk_4")
  stock_items_category stock_items_category @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "stock_item_ibfk_1")
  supplier             supplier             @relation(fields: [supplier_id], references: [id], onUpdate: Restrict, map: "stock_item_ibfk_2")
  users                users?                @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "stock_item_ibfk_3")

  @@index([category_id], map: "category_id")
  @@index([supplier_id], map: "idx_stock_supplier")
  @@index([user_id], map: "user_id")
}

model stock_items_category {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  created_at DateTime?    @default(now()) @db.Timestamp(0)
  updated_at DateTime?    @default(now()) @db.Timestamp(0)
  user_id    Int?
  stock_item stock_item[]
  users      users ?       @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "stock_items_category_ibfk_1")

  @@index([user_id], map: "user_id")
}

model supplier {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  tin        String       @db.VarChar(20) @unique
  phone      String       @db.VarChar(20)
  created_at DateTime?    @default(now()) @db.Timestamp(0)
  updated_at DateTime?    @default(now()) @db.Timestamp(0)
  user_id    Int?
  stock_item stock_item[]
  users      users?        @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "supplier_ibfk_1")

  @@index([user_id], map: "user_id")
}

model user_actions {
  id         Int       @id @default(autoincrement())
  user_id    Int
  action     String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  users      users?     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_actions_ibfk_1")

  @@index([user_id], map: "user_id")
}

model user_permissions {
  id                                               Int       @id @default(autoincrement())
  user_id                                          Int
  permission_name                                  String    @db.VarChar(50)
  created_at                                       DateTime? @default(now()) @db.Timestamp(0)
  updated_at                                       DateTime? @default(now()) @db.Timestamp(0)
  granted_by_user_id                               Int
  users_user_permissions_user_idTousers            users     @relation("user_permissions_user_idTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "user_permissions_ibfk_1")
  users_user_permissions_granted_by_user_idTousers users     @relation("user_permissions_granted_by_user_idTousers", fields: [granted_by_user_id], references: [id], onUpdate: Restrict, map: "user_permissions_ibfk_2")

  @@index([granted_by_user_id], map: "granted_by_user_id")
  @@index([user_id], map: "user_id")
}

model users {
  id                                                          Int                    @id @default(autoincrement())
  username                                                    String                 @unique(map: "username") @db.VarChar(50)
  email                                                       String                 @unique(map: "email") @db.VarChar(100)
  password                                                    String                 @db.VarChar(255)
  created_at                                                  DateTime?              @default(now()) @db.Timestamp(0)
  updated_at                                                  DateTime?              @default(now()) @db.Timestamp(0)
  customer                                                    customer[]
  invoice                                                     invoice[]
  invoice_product                                             invoice_product[]
  notification_type                                           notification_type[]
  notifications_notifications_for_user_idTousers              notifications[]        @relation("notifications_for_user_idTousers")
  notifications_notifications_user_idTousers                  notifications[]        @relation("notifications_user_idTousers")
  Renamedpackage                                              Renamedpackage[]
  package_type                                                package_type[]
  product                                                     product[]
  product_type                                                product_type[]
  proforma_invoice                                            proforma_invoice[]
  proforma_product                                            proforma_product[]
  quotation                                                   quotation[]
  quotation_product                                           quotation_product[]
  stock_item                                                  stock_item[]
  stock_items_category                                        stock_items_category[]
  supplier                                                    supplier[]
  user_actions                                                user_actions[]
  user_permissions_user_permissions_user_idTousers            user_permissions[]     @relation("user_permissions_user_idTousers")
  user_permissions_user_permissions_granted_by_user_idTousers user_permissions[]     @relation("user_permissions_granted_by_user_idTousers")
}

enum stock_item_status {
  active
  inactive
  discontinued
}
